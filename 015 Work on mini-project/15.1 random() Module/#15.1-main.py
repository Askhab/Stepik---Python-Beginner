# random() MODULE

# RANDOM NUMBERS
# Random numbers are widely used in various programming tasks:

# - random numbers are used in games. For example, computer games that allow the player to roll a die need random numbers to represent the values of the die. Programs that reveal playing cards drawn from a shuffled deck use random numbers to represent the value of the cards;
# - random numbers are used in simulation programs. In some simulations, the computer must randomly decide how a person, animal, insect, or other living thing will behave. Often, formulas are constructed where a random number is used to determine various options for actions and events occurring in the program;
# - random numbers are common in statistical programs that randomly select data for analysis;
# - Random numbers are used in computer security to encrypt sensitive data.

# Python offers built-in functions for working with random numbers. These functions are stored in the random module in the standard library.

# random() Module
# The random module provides functions for generating random numbers, letters, and random selection of elements of a sequence (list, string, etc.).

# To use these functions at the beginning of the program, you need to include the module, which is done by the import command:

# import random

# After connecting the module, we can use its functions.

# randint() - Function
# The randint() function takes two mandatory arguments a and b and returns a random integer from the interval [a; b].

# The following code prints two random integers: num1 from the interval [0; 17] and num2 from the segment [-5; 5] .

import random

num1 = random.randint(0, 17)
num2 = random.randint(-5, 5)

print(num1)
print(num2)

# IMPORTANT: the left and right borders of a and b are included in the range of generated random numbers. The result of calling the random.randint(2, 9) function can be any number between 22 and 99 inclusive.

# The following code prints 1010 random integers from the range [1; \, 100][1;100]:

import random

for _ in range(10):
    print(random.randint(1, 100))

# Among these numbers, repetitions are possible, since each time a random number is chosen.


# randrange() - FUNCTION
# If you remember how to use the range() function, you will feel at ease with the randrange() function. The randrange() function takes the same arguments as the range() function. The difference is that the randrange() function does not return the sequence of numbers itself. Instead, it returns a randomly selected number from a sequence of numbers.

# The following code assigns a random number between 00 and 99 to the num variable:

# import random
num = random.randrange(10)

# Argument 10 specifies the end limit of the sequence of values. The function will return a randomly selected number from a sequence of numbers from 0 to the end limit, excluding the limit itself.

# The following code sets the start value and end limit of the sequence:

# import random
num = random.randrange(5, 10)

# Thus, the variable num will store a random number in the range from 55 to 99.

# The following code sets the start value, end limit, and step size:

# import random
num = random.randrange(0, 101, 10)

# Thus, the num variable will store a random number from the sequence of numbers: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100


# random() - FUNCTION
# The randint() and randrange() functions return a random integer. But the random() function returns a random floating point number (real number). No arguments are passed to the random() function. The random() function returns a random floating point number between 0.0 and 1.0 (excluding 1.0).

# The following code prints a random floating point number from the range [0.0; 1.0]:

# import random
# num = random.random()
print(num)


# uniform() - FUNCTION
# The uniform() function also returns a random floating point number, but it also allows you to set a range for selecting values.

# The following code prints a random floating point number from the range [1.5;17.3]:

# import random
num = random.uniform(1.5, 17.)
print(num)


# INITIAL VALUES OF RANDOM NUMBERS
# The numbers generated by the functions of the random module are not truly random. Although they are commonly referred to as random numbers, they are pseudo-random numbers that are calculated based on a formula. A formula that generates random numbers must be initialized with a seed value. It is used in a calculation that returns the next random number in the series. When the random module is imported, it gets the system time from the computer's internal clock and uses it as its initial value. The system time is an integer representing the current date and time up to one hundredth of a second. If the same seed were always used, the random number generation functions would always return the same set of pseudo-random numbers. Since the system time changes every hundredth of a second, it is safe to say that whenever the random module is imported, a different sequence of random numbers will be generated from the previous ones.

# However, there may be some programs where it is required to always generate the same sequence of random numbers. You can optionally call the seed() function to do this, specifying a seed value.

# The following code generates 10random numbers, and in doing so contains an instruction that explicitly sets the initial value for the random number generator:

# import random

random.seed(17)   # explicitly set the seed for the random number generator
for _ in range(10):
    print(random.randint(1, 100))

# The result of executing such code may be:

# 67
# 54
# 39
# 47
# 38
# 23
# 99
# 91
# 91
# 70

# If we execute this code again, we will get the same sequence of pseudo-random numbers.


# NOTES
# Note 1. Module connection as follows:

# from random import *

# allows you not to write the name of the module and the dot symbol in the future when calling module functions.

# Note 2. The functions of the random module are actually methods of the random class of the same name.

# Note 3. The randint() function is implemented based on the randrange() function as follows:

# Return random integer in range [a, b], including both end points.
def randint(self, a, b):
    return self.randrange(a, b + 1)


# Problem solving
# Problem 1. Professor Timur teaches an introductory course in statistics and asked you to write a program that he could use in class to simulate throwing dice. The program should randomly generate two numbers between 11 and 66 and display them.

# Solution. To generate integers, we will use the randint() function:

# import random

print('Throwing the dice... ')
print('Face values:')
print(random.randint(1, 6))
print(random.randint(1, 6))


# Problem 2. In an interview with Professor Timur, you find out that he would like to use a program to simulate several successive rolls of a die.

# Solution. We will use a while loop that simulates one roll of dice and then asks the user if whether to make another roll. The loop will repeat until the user answers "yes" by typing the letter "d":

# import random

again = 'd'
while again.lower() == 'd':
    print('Throwing the dice... ')
    print('Face values:')
    print(random.randint(1, 6))
    print(random.randint(1, 6))
    again = input('Do you want to roll the dice again? (y = yes, n = no): ')


# Problem 3. Professor Timur was so pleased with the dice-rolling simulator you wrote that he asked you to develop another program. He would like to have a 10-time coin toss simulator. Whenever the program simulates a coin toss, it should randomly display heads or tails.

# Solution. We can simulate a coin toss by generating a random number between 0 and 1. To generate integers, we will use the randint() function:

# import random

for _ in range(10):
    num = random.randint(0, 1)
    if num == 0:
        print('Eagle')
    else:
        print('tails')


# shuffle() - FUNCTION
# The shuffle() function takes a list as a required argument and shuffles it randomly.

# The following code shuffles a list of numbers randomly and then outputs its contents:

# import random

numbers = [1, 2, 3, 4, 5, 6, 7, 8]
random.shuffle(numbers)
print(numbers)

# The result of this code might be:
# [4, 7, 8, 1, 2, 3, 6, 5]


# choice() - FUNCTION
# The choice() function takes a list (string) as a required argument and returns one random element from the passed list (string).

# The following code prints one random element from the string 'BEEGEEK' and the lists [1, 2, 3, 4], ['a', 'b', 'c', 'd']:

# import random

print(random.choice('BEEGEEK'))
print(random.choice([1, 2, 3, 4]))
print(random.choice(['a', 'b', 'c', 'd']))

# The result of this code might be:
# E
# 3
# c


# sample() - FUNCTION
# The sample() function takes two required arguments: a list (string) and the number of random elements, and returns a list of random elements in the specified number.

# The result of the code:

# import random

numbers = [2, 5, 8, 9, 12]

print(random.sample(numbers, 1))
print(random.sample(numbers, 2))
print(random.sample(numbers, 3))
print(random.sample(numbers, 5))

# may be:
# [9]
# [12, 5]
# [9, 2, 8]
# [12, 8, 9, 5, 2]

# The number of random elements must not exceed the length of the initial list (string). Next code:

# import random

numbers = [2, 5, 8, 9, 12]
print(random.sample(numbers, 6))

# will result in an error:
# ValueError: Sample larger than population or is negative
